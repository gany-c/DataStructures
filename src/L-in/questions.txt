1. How will you sell Linkedin's premium membership on Walmart? 
What would be the interfaces? 
What requirements, or specifications will you reauest?

2. Why not have a persistent layer at IRO itself? 
How will you fill up this DB?
When will you access or refresh it, if the RTs are the source of truth?

3. Given two sorted lists, with no internal duplicates 
- Create their intersection and union, both should be sorted
- If you use a TreeSet, what will be the complexity? 
- What is a TreeSet's retrieval complexity, 
- What is a TreeSet's inner structure.
- This can be done using merge sort 
- just add a check for equality and update the intersection array, instead of the merge array
- the merge array will form the union array.

4. Given the X and Y coordinates of a set of points, find the maximum number of points which can be fitted on a line

- This can be done in n^2 complexity.
- Solve the problem for each point taking that point as a "must pass" for the line
--- Maintain a map of slope - count of points, return the max from the map
- Get the max of the results from above.

5. Incrementally design a game system

1. Simple Hangman game for 1000 users; no persistence
-- put the session in HttpSession
2. What if you want to see your cummulative score
-- persistence layer, score table
3.  What if you want to see top ranked players in another page
-- Kafka not needed here for offline rank calculation
-- A simple api on the score table, with order by
4.  How would you calculate the user's rank?
-- it will not be in the top 100 or so - calculating rank will be expensive
-- how do you approximate the rank? correlate rank and score and periodically correct the rank?
5. Now, what if you have to load balance this system?
-- Will you create a new table for rank apart from score and constantly update this?
-- What will be the model of the table in nosql
6. Now, what if you want to add friends, and friends rank to the screen?
-- Will you have a friends to friends table and invoke this as a separate ajax API?
-- Will you have a single denormalized table? of friend ranks?